
// App.js

import React, { useState, useEffect } from 'react';
import axios from 'axios';

function App() {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [balance, setBalance] = useState(0);
  const [withdrawAmount, setWithdrawAmount] = useState(0);

  useEffect(() => {
    axios.get('/balance', {
      params: {
        username
      }
    })
      .then(response => {
        setBalance(response.data.balance);
      })
      .catch(error => {
        console.error(error);
      });
  }, [username]);

  const handleLogin = (event) => {
    event.preventDefault();
    axios.post('/login', {
      username,
      password
    })
      .then(response => {
        console.log(response.data);
      })
      .catch(error => {
        console.error(error);
      });
  };

  const handleWithdraw = (event) => {
    event.preventDefault();
    axios.post('/withdraw', {
      username,
      amount: withdrawAmount
    })
      .then(response => {
        console.log(response.data);
      })
      .catch(error => {
        console.error(error);
      });
  };

  return (
    <div>
      <h1>Online Banking System</h1>
      <form onSubmit={handleLogin}>
        <label>Username:</label>
        <input type="text" value={username} onChange={(event) => setUsername(event.target.value)} />
        <br />
        <label>Password:</label>
        <input type="password" value={password} onChange={(event) => setPassword(event.target.value)} />
        <br />
        <button type="submit">Login</button>
      </form>
      <h2>Balance: {balance}</h2>
      <form onSubmit={handleWithdraw}>
        <label>Withdraw Amount:</label>
        <input type="number" value={withdrawAmount} onChange={(event) => setWithdrawAmount(event.target.value)} />
        <br />
        <button type="submit">Withdraw</button>
      </form>
    </div>
  );
}

export default App;
-------------

<!DOCTYPE html>

<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Online Banking System</title>
</head>
<body>
  <div id="root"></div>
  <script src="index.js"></script>
</body>
</html>
----------------

import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);

-----------------------

// server.js
const express = require('express');
const app = express();
const bodyParser = require('body-parser');
const mongoose = require('mongoose');

// Connect to MongoDB
mongoose.connect('mongodb://localhost/bank', { useNewUrlParser: true, useUnifiedTopology: true });

// Define User model
const userSchema = new mongoose.Schema({
  username: String,
  password: String,
  balance: Number
});

const User = mongoose.model('User', userSchema);

// Middleware
app.use(bodyParser.json());

// Routes
app.post('/login', (req, res) => {
  const { username, password } = req.body;
  User.findOne({ username, password }, (err, user) => {
    if (err) {
      res.status(500).send({ message: 'Error logging in' });
    } else if (!user) {
      res.status(401).send({ message: 'Invalid username or password' });
    } else {
      res.send({ message: 'Logged in successfully' });
    }
  });
});

app.get('/balance', (req, res) => {
  const username = req.query.username;
  User.findOne({ username }, (err, user) => {
    if (err) {
      res.status(500).send({ message: 'Error fetching balance' });
    } else if (!user) {
      res.status(404).send({ message: 'User not found' });
    } else {
      res.send({ balance: user.balance });
    }
  });
});

app.post('/withdraw', (req, res) => {
  const { username, amount } = req.body;
  User.findOne({ username }, (err, user) => {
    if (err) {
      res.status(500).send({ message: 'Error withdrawing money' });
    } else if (!user) {
      res.status(404).send({ message: 'User not found' });
    } else if (user.balance < amount) {
      res.status(402).send({ message: 'Insufficient balance' });
    } else {
      user.balance -= amount;
      user.save((err) => {
        if (err) {
          res.status(500).send({ message: 'Error updating balance' });
        } else {
          res.send({ message: 'Money withdrawn successfully' });
        }
      });
    }
  });
});

app.listen(3000, () => {
  console.log('Server started on port 3000');
});


----------------

